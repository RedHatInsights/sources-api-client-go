/*
 * Sources
 *
 * Sources
 *
 * API version: 3.1.0
 * Contact: support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sourcesapi

import (
	"encoding/json"
)

// SuperKeyRequest Details on the provided superkey request, most notably the provider and type of request(s)
type SuperKeyRequest struct {
	Provider *string `json:"provider,omitempty"`
	Applications *[]string `json:"applications,omitempty"`
	// the superkey source to create applications under. only required if not included in a `bulk_create` request 
	SourceId *string `json:"source_id,omitempty"`
}

// NewSuperKeyRequest instantiates a new SuperKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperKeyRequest() *SuperKeyRequest {
	this := SuperKeyRequest{}
	return &this
}

// NewSuperKeyRequestWithDefaults instantiates a new SuperKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperKeyRequestWithDefaults() *SuperKeyRequest {
	this := SuperKeyRequest{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *SuperKeyRequest) GetProvider() string {
	if o == nil || o.Provider == nil {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperKeyRequest) GetProviderOk() (*string, bool) {
	if o == nil || o.Provider == nil {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *SuperKeyRequest) HasProvider() bool {
	if o != nil && o.Provider != nil {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *SuperKeyRequest) SetProvider(v string) {
	o.Provider = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *SuperKeyRequest) GetApplications() []string {
	if o == nil || o.Applications == nil {
		var ret []string
		return ret
	}
	return *o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperKeyRequest) GetApplicationsOk() (*[]string, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *SuperKeyRequest) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []string and assigns it to the Applications field.
func (o *SuperKeyRequest) SetApplications(v []string) {
	o.Applications = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SuperKeyRequest) GetSourceId() string {
	if o == nil || o.SourceId == nil {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperKeyRequest) GetSourceIdOk() (*string, bool) {
	if o == nil || o.SourceId == nil {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SuperKeyRequest) HasSourceId() bool {
	if o != nil && o.SourceId != nil {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SuperKeyRequest) SetSourceId(v string) {
	o.SourceId = &v
}

func (o SuperKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.SourceId != nil {
		toSerialize["source_id"] = o.SourceId
	}
	return json.Marshal(toSerialize)
}

type NullableSuperKeyRequest struct {
	value *SuperKeyRequest
	isSet bool
}

func (v NullableSuperKeyRequest) Get() *SuperKeyRequest {
	return v.value
}

func (v *NullableSuperKeyRequest) Set(val *SuperKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperKeyRequest(val *SuperKeyRequest) *NullableSuperKeyRequest {
	return &NullableSuperKeyRequest{value: val, isSet: true}
}

func (v NullableSuperKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


